

-Print                                                               print("Hello World")
Prints a string into the console. 

-Input                                                               input("What's your name")
Prints a string into the console,
and asks the user for a string input.

-Print in another line         \n                                     print("Hello\nHello")
using same command print
must be inside the quotes

-Print space                                                          print("Hello World")
add a space in the " " 
if dont want any space                                                 print("HelloWorld")

-Strings                                                              my_string = "Hello"
A string is just a string of characters.
It should be surrounded by double quotes.

- Integer
large numbers put _ in between the thousands.                        569_945_301

- Float
Decimals                                                               3.14159     

- Boolean
True of False

- When divide a number we will have a                                 print(9 // 5)
floating point number                                                      4

-type()                                        check whatever you put between the parentheses and give you the type of data that it is 
   good for troubleshooting                                                 print(type(variable))

-String Concatenation                                                  "Hello" + "Hi"                 
You can add strings to string to create                                #becomes HelloHi
a new string. This is called concatenation.
It results in a new string.

-Print the lenght of string                                          variable = input("What is your name?\n")
                                                                     print(len(variable))
                                                                        int, str, etc

do type conversion or casting 
change a piece of data from one particular data type to another.          variable_int = len(input("type any number"))
                                                                          change_variable_to_float = float(variable_int)
                                                                          print("The number has " + change_variable_to_float + " characters")     


- Variables
A variable give a name to a piece of data.                            name = "Bob" 
Like a box with a label, it tells you what's                          age = 345
inside the box. You can refer everytime in your
code.


- Index
[]
the square brackets, we can put the index or                            print("Bloob"[1])
the position of the character that we want                              l
this method of pulling out a particular element 
from a string is called sub-scripting


-When writing code it is common to manipulate                             value = 0 
a value based on its previous value
This is a convient way of saying: "take the
previous value and add to it.                                             value += 1   #could be value = value + 1
could be  value -=1, value *=1, value /=1


- F-Strings
You can insert a variable into a string using f-strings                          days = 365
The syntax is simple, just insert the variable                                print(f"There are {days} in a year")
in-between a set of curly braces {}.
days = 365
print(f"There are {days}
in a year"


- IF/ELSE - NESTED
in a nested if statement, once the first condition has passed,we can check for another condition. And then we can have another 
if/else statement inside this if condition

>=   Greater than or equal to                                                  
<=   Less than or equal to 
==   Equal precisely, Equality, checking to see if the value on the left is equal to the value on the right
=    Assign value
!=   Not Equal


- Modulo Operator 
you'll want to know what is the remainder after a division.
e.g. 4 รท 2 = 2 with no remainder but 5 รท 2 = 2 with 1 remainder. The modulo does not give you the result of the division, just the remainder.


- IF/ELSE/ELIF                                                                 if condition 1:
 conditional statement                                                               do A
It is good to use a flow chart to get better idea                              elif condition 2:
                                                                                      do B
                                                                              else:
                                                                                      do this 


- Multiple if
what if you were in a situation where you need to check for multiple conditions even if the previous one was already true?                if condition 1:
If condition 1 is true, then do a, but then the code is going to go to the next case and check if condition 2 is also true,               do A
in which case it will do B and if the final condition is also true, it's going to do C                                                    if condition 2:
                                                                                                                                          do B
                                                                                                                                          if condition 3:
  pep = input("Do you want pepperoni? Y or N ")                                                                                           do C
    if pep == "Y"                                                                                                                                        

- Logical Operators
A AND B      the entire line of code to be true.If just one of them is true, say A is true and B is false, then the overall thing evaluates to false.
C OR D      if a C or D were true or if they're both true,then it'll evaluate to true. It's only when both C and D are false does this statement actually become false.
NOT E



- Randomization in any sort of programming language is really useful because if we want to create a game,if we want a program to do something different each time.
there's a whole bunch of maths that can be applied to create what are called a pseudo-random number generators. Python uses is something called the Mersenne Twister.
Python team have already created a random module.  (import random)


- Module
module is responsible for a different bit of functionality of your program
random module is a module that the Python team created to make it easier for us to generate our random numbers without needing to get into
the complexities of all of the math that's required to generate pseudorandom numbers.


- List                                                               list = [item1, item2]
And the list is what you would call a data structure.
it's just a way of organizing and storing data in Python, the list use [],  when you try to get items out of the list, you also use square brackets and inside of the square brackets is where you put the index or the offset
of the item that you want.  if I wrote -1 or -2, then it actually starts counting from the end of the list.
the order in which they're stored in our data structure is now also immensely important. When you store it inside the variable, that order is not lost and you'll be able to use it later on when you need the list.

we can write the name of the list and then we use a function called append and append will add a single item to the end of the list.
list.append("item3")





